{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import sklearn\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import json\n",
    "from sklearn.feature_selection import SelectKBest\n",
    "from sklearn.feature_selection import chi2\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.linear_model import LogisticRegression"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our dataset appears to consist of two types of samples - bid samples, and ad samples. Since we are only trying to predict clicks on the ad, AKA \"c_cnt\", which only exists in ad samples, we will only be working with those data. Let's first parse the data and get what we need."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#reads a weird json, and returns the bids dataframe and ads dataframe\n",
    "def read_weird_json(path):\n",
    "    bids = []\n",
    "    ads = []\n",
    "\n",
    "    with open(path) as f:\n",
    "        for line in f:\n",
    "            line_dict = json.loads(line)\n",
    "            if 'advertiser_id' in line_dict:\n",
    "                if line_dict['rate_metric'] != 'CPC':\n",
    "                    continue\n",
    "                ads.append(line_dict)\n",
    "            else:\n",
    "                bids.append(line_dict)\n",
    "\n",
    "    df_bids = pd.DataFrame.from_records(bids)\n",
    "    df_ads = pd.DataFrame.from_records(ads)  \n",
    "    \n",
    "    return [df_bids, df_ads]\n",
    "\n",
    "#Returns a list of dataframes. Only looks at ads. \n",
    "def read_many_jsons(paths): \n",
    "    dfs = []\n",
    "    for path in paths: \n",
    "        dfs += [read_weird_json(path)[1]]\n",
    "    return dfs\n",
    "    \n",
    "dfs = read_many_jsons(['./11-0', './11-1', './11-2', './11-3'])\n",
    "#'./11-4', './11-5', './11-6', './11-7', './11-8', './11-9', './11-10'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#Create one dataframe with the combined data. \n",
    "df = pd.concat(dfs)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, we need to do some data cleaning. From some initial exploratory analysis, we can see that that we have 5 features with only 16 non-nan values, with a few other features having a similarly low level of non-nan values. To simplify things, we choose to drop all features with less than 20,000 non-nan values. Also, as we are trying to predict c_cnt, samples where c_cnt is NaN are useless, so we throw those away as well. \n",
    "\n",
    "After this, we see that less than 10% of our remaining samples contains any NaN values, so we just drop those samples as we don't lose that much information from them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ad_network_id            1005218\n",
      "ad_type                  1005218\n",
      "advertiser_id            1005218\n",
      "bid_requests             1005218\n",
      "bid_responses            1005218\n",
      "c_cnt                     847978\n",
      "c_timestamp                  402\n",
      "c_txn_fee                    402\n",
      "c_txn_rate                   402\n",
      "campaign_id              1005218\n",
      "campaign_type            1005218\n",
      "cr_cnt                   1005218\n",
      "creative_id              1005218\n",
      "exp_mode                  154801\n",
      "f_cnt                     847978\n",
      "geo_continent_code       1005218\n",
      "geo_country_code2        1005218\n",
      "geo_dma_code             1005218\n",
      "geo_region_name           986891\n",
      "geo_timezone              990266\n",
      "i_cnt                     847978\n",
      "i_timestamp               847510\n",
      "pub_network_id           1005218\n",
      "r_cnt                    1005218\n",
      "r_num_ads_requested      1005218\n",
      "r_num_ads_returned       1005218\n",
      "r_num_ads_third_party    1005218\n",
      "r_timestamp              1005218\n",
      "rate_metric              1005218\n",
      "session_id               1005218\n",
      "site_id                  1005218\n",
      "token                    1005218\n",
      "txn_fee                      402\n",
      "txn_rate                     402\n",
      "ua_device                1005218\n",
      "ua_device_type           1001278\n",
      "ua_name                  1005218\n",
      "ua_os_name               1005218\n",
      "vi_cnt                    847978\n",
      "vi_timestamp              107060\n",
      "vv_cnt                    847978\n",
      "zone_id                  1005218\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#how many non-nan values do we have?\n",
    "print(df.count())\n",
    "\n",
    "#filter threshhold\n",
    "df = df.dropna(thresh=20000, axis=1)\n",
    "#filter rows with c_cnt as NaN\n",
    "df = df[np.isfinite(df['c_cnt'])]\n",
    "#drop all samples with NaN values\n",
    "df = df.dropna(axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>advertiser_id</th>\n",
       "      <th>ua_device_type</th>\n",
       "      <th>total_count</th>\n",
       "      <th>c_cnt/v_cnt</th>\n",
       "      <th>vi_cnt/i_cnt</th>\n",
       "      <th>c_cnt/i_cnt</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5063</td>\n",
       "      <td>BOT</td>\n",
       "      <td>1</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5063</td>\n",
       "      <td>MOB</td>\n",
       "      <td>5611</td>\n",
       "      <td>0.006060</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.006060</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5063</td>\n",
       "      <td>PC</td>\n",
       "      <td>3336</td>\n",
       "      <td>0.006295</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.006295</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5063</td>\n",
       "      <td>TAB</td>\n",
       "      <td>1954</td>\n",
       "      <td>0.014841</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.014841</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5152</td>\n",
       "      <td>MOB</td>\n",
       "      <td>4788</td>\n",
       "      <td>0.010234</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.010234</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5152</td>\n",
       "      <td>PC</td>\n",
       "      <td>1831</td>\n",
       "      <td>0.007100</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.007100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>5152</td>\n",
       "      <td>TAB</td>\n",
       "      <td>1534</td>\n",
       "      <td>0.011734</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.011734</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>5189</td>\n",
       "      <td>MOB</td>\n",
       "      <td>712</td>\n",
       "      <td>0.009831</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.009831</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>5189</td>\n",
       "      <td>PC</td>\n",
       "      <td>1228</td>\n",
       "      <td>0.002443</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.002443</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>5189</td>\n",
       "      <td>TAB</td>\n",
       "      <td>247</td>\n",
       "      <td>0.008097</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.008097</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   advertiser_id ua_device_type  total_count  c_cnt/v_cnt  vi_cnt/i_cnt  \\\n",
       "0           5063            BOT            1     0.000000           0.0   \n",
       "1           5063            MOB         5611     0.006060           1.0   \n",
       "2           5063             PC         3336     0.006295           1.0   \n",
       "3           5063            TAB         1954     0.014841           1.0   \n",
       "4           5152            MOB         4788     0.010234           1.0   \n",
       "5           5152             PC         1831     0.007100           1.0   \n",
       "6           5152            TAB         1534     0.011734           1.0   \n",
       "7           5189            MOB          712     0.009831           1.0   \n",
       "8           5189             PC         1228     0.002443           1.0   \n",
       "9           5189            TAB          247     0.008097           1.0   \n",
       "\n",
       "   c_cnt/i_cnt  \n",
       "0     0.000000  \n",
       "1     0.006060  \n",
       "2     0.006295  \n",
       "3     0.014841  \n",
       "4     0.010234  \n",
       "5     0.007100  \n",
       "6     0.011734  \n",
       "7     0.009831  \n",
       "8     0.002443  \n",
       "9     0.008097  "
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result = df.copy()\n",
    "result = result[['c_cnt', 'vi_cnt', 'i_cnt', 'advertiser_id', 'pub_network_id', 'site_id', 'ua_device_type']]\n",
    "collective = result.groupby(['advertiser_id', 'ua_device_type'])['c_cnt', 'vi_cnt', 'i_cnt'].sum()\n",
    "advertisers_c_cnt = result.groupby(['advertiser_id', 'ua_device_type'])['c_cnt'].sum()\n",
    "advertisers_vi_cnt = result.groupby(['advertiser_id', 'ua_device_type'])['vi_cnt'].sum()\n",
    "advertisers_i_cnt = result.groupby(['advertiser_id', 'ua_device_type'])['i_cnt'].sum()\n",
    "\n",
    "collective['total_count'] = result.groupby(['advertiser_id', 'ua_device_type']).count()['site_id']\n",
    "collective['c_cnt/v_cnt'] = advertisers_c_cnt/advertisers_vi_cnt\n",
    "collective['vi_cnt/i_cnt'] = advertisers_vi_cnt/advertisers_i_cnt\n",
    "collective['c_cnt/i_cnt'] = advertisers_c_cnt/advertisers_i_cnt\n",
    "\n",
    "collective.drop(columns=['c_cnt', 'vi_cnt', 'i_cnt'], inplace=True)\n",
    "collective.reset_index(inplace=True)\n",
    "\n",
    "collective.fillna(value=0, inplace=True)\n",
    "\n",
    "collective"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ad_network_id</th>\n",
       "      <th>ad_type</th>\n",
       "      <th>advertiser_id</th>\n",
       "      <th>bid_requests</th>\n",
       "      <th>bid_responses</th>\n",
       "      <th>c_cnt</th>\n",
       "      <th>campaign_id</th>\n",
       "      <th>campaign_type</th>\n",
       "      <th>cr_cnt</th>\n",
       "      <th>creative_id</th>\n",
       "      <th>...</th>\n",
       "      <th>ua_name</th>\n",
       "      <th>ua_os_name</th>\n",
       "      <th>vi_cnt</th>\n",
       "      <th>vi_timestamp</th>\n",
       "      <th>vv_cnt</th>\n",
       "      <th>zone_id</th>\n",
       "      <th>total_count</th>\n",
       "      <th>c_cnt/v_cnt</th>\n",
       "      <th>vi_cnt/i_cnt</th>\n",
       "      <th>c_cnt/i_cnt</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>727</td>\n",
       "      <td>[story]</td>\n",
       "      <td>5152</td>\n",
       "      <td>[]</td>\n",
       "      <td>[]</td>\n",
       "      <td>0.0</td>\n",
       "      <td>26038</td>\n",
       "      <td>outside</td>\n",
       "      <td>1</td>\n",
       "      <td>4602192</td>\n",
       "      <td>...</td>\n",
       "      <td>Mobile Safari UI/WKWebView</td>\n",
       "      <td>iOS</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2018-02-11T00:52:50.304000Z</td>\n",
       "      <td>0.0</td>\n",
       "      <td>14414</td>\n",
       "      <td>4788</td>\n",
       "      <td>0.010234</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.010234</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>727</td>\n",
       "      <td>[story]</td>\n",
       "      <td>5152</td>\n",
       "      <td>[]</td>\n",
       "      <td>[]</td>\n",
       "      <td>0.0</td>\n",
       "      <td>26038</td>\n",
       "      <td>outside</td>\n",
       "      <td>1</td>\n",
       "      <td>4602194</td>\n",
       "      <td>...</td>\n",
       "      <td>Mobile Safari UI/WKWebView</td>\n",
       "      <td>iOS</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2018-02-11T00:09:41.882000Z</td>\n",
       "      <td>0.0</td>\n",
       "      <td>14414</td>\n",
       "      <td>4788</td>\n",
       "      <td>0.010234</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.010234</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>727</td>\n",
       "      <td>[story]</td>\n",
       "      <td>5152</td>\n",
       "      <td>[]</td>\n",
       "      <td>[]</td>\n",
       "      <td>0.0</td>\n",
       "      <td>26038</td>\n",
       "      <td>outside</td>\n",
       "      <td>1</td>\n",
       "      <td>4602192</td>\n",
       "      <td>...</td>\n",
       "      <td>Chrome Mobile</td>\n",
       "      <td>Android</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2018-02-11T00:30:02.819000Z</td>\n",
       "      <td>0.0</td>\n",
       "      <td>14414</td>\n",
       "      <td>4788</td>\n",
       "      <td>0.010234</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.010234</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>727</td>\n",
       "      <td>[story]</td>\n",
       "      <td>5152</td>\n",
       "      <td>[]</td>\n",
       "      <td>[]</td>\n",
       "      <td>0.0</td>\n",
       "      <td>26038</td>\n",
       "      <td>outside</td>\n",
       "      <td>1</td>\n",
       "      <td>4602192</td>\n",
       "      <td>...</td>\n",
       "      <td>Mobile Safari UI/WKWebView</td>\n",
       "      <td>iOS</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2018-02-11T00:22:32.287000Z</td>\n",
       "      <td>0.0</td>\n",
       "      <td>14414</td>\n",
       "      <td>4788</td>\n",
       "      <td>0.010234</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.010234</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>727</td>\n",
       "      <td>[story]</td>\n",
       "      <td>5152</td>\n",
       "      <td>[]</td>\n",
       "      <td>[]</td>\n",
       "      <td>0.0</td>\n",
       "      <td>26038</td>\n",
       "      <td>outside</td>\n",
       "      <td>1</td>\n",
       "      <td>4602195</td>\n",
       "      <td>...</td>\n",
       "      <td>Mobile Safari UI/WKWebView</td>\n",
       "      <td>iOS</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2018-02-11T00:01:37.649000Z</td>\n",
       "      <td>0.0</td>\n",
       "      <td>14414</td>\n",
       "      <td>4788</td>\n",
       "      <td>0.010234</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.010234</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 41 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   ad_network_id  ad_type  advertiser_id bid_requests bid_responses  c_cnt  \\\n",
       "0            727  [story]           5152           []            []    0.0   \n",
       "1            727  [story]           5152           []            []    0.0   \n",
       "2            727  [story]           5152           []            []    0.0   \n",
       "3            727  [story]           5152           []            []    0.0   \n",
       "4            727  [story]           5152           []            []    0.0   \n",
       "\n",
       "   campaign_id campaign_type  cr_cnt  creative_id     ...       \\\n",
       "0        26038       outside       1      4602192     ...        \n",
       "1        26038       outside       1      4602194     ...        \n",
       "2        26038       outside       1      4602192     ...        \n",
       "3        26038       outside       1      4602192     ...        \n",
       "4        26038       outside       1      4602195     ...        \n",
       "\n",
       "                      ua_name  ua_os_name vi_cnt                 vi_timestamp  \\\n",
       "0  Mobile Safari UI/WKWebView         iOS    1.0  2018-02-11T00:52:50.304000Z   \n",
       "1  Mobile Safari UI/WKWebView         iOS    1.0  2018-02-11T00:09:41.882000Z   \n",
       "2               Chrome Mobile     Android    1.0  2018-02-11T00:30:02.819000Z   \n",
       "3  Mobile Safari UI/WKWebView         iOS    1.0  2018-02-11T00:22:32.287000Z   \n",
       "4  Mobile Safari UI/WKWebView         iOS    1.0  2018-02-11T00:01:37.649000Z   \n",
       "\n",
       "   vv_cnt zone_id total_count  c_cnt/v_cnt vi_cnt/i_cnt  c_cnt/i_cnt  \n",
       "0     0.0   14414        4788     0.010234          1.0     0.010234  \n",
       "1     0.0   14414        4788     0.010234          1.0     0.010234  \n",
       "2     0.0   14414        4788     0.010234          1.0     0.010234  \n",
       "3     0.0   14414        4788     0.010234          1.0     0.010234  \n",
       "4     0.0   14414        4788     0.010234          1.0     0.010234  \n",
       "\n",
       "[5 rows x 41 columns]"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.merge(df, collective, on=['advertiser_id', 'ua_device_type'])\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "Now, we have some more preprocessing to do, so we wrote some simple functions for preprocessing. The most important thing we do here is that since most of our features are categorical, we must encode them with one-hot-encoding, which essentially turns one feature into n different features, one for each type of class in the original features. For example, if we had a feature for \"hair color\", we would map it to a higher dimensional feature space consisting of \"is the hair white\", \"is the hair black\", \"is the hair brown\", etc. Only one of these features would be a 1, and the rest would be 0.\n",
    "\n",
    "Normally, each feature would be mapped to n features, with n being the number of unique classes that feature contains. For our data, however, some features will have thousands, even millions of unique classes, which would result is an omega-sparse dataset. To account for this, we set a threshhold at 200, such that n will never be greater than 201. We still keep track of the 200 most frequent classes, however, the rest will be bunched into a single class. The motivation for this is that for the more frequent classes, we have enough data that our ML models will be able to extract some information, but for the less frequent classes, there is too little data for accurate analysis, so we group them as one class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#Turns a timestamp into which minute the time was at - used as a categorical feature.\n",
    "def timestamp_to_min(timestamp):\n",
    "    return timestamp.split(':')[1]\n",
    "\n",
    "def timestamp_to_hr(timestamp): \n",
    "    return timestamp.split(':')[0][-2::]\n",
    "\n",
    "#plots frequency of a feature's different classes, useful for exploratory analysis\n",
    "def plot_freq(col_name, df):\n",
    "    df_frequency = df.groupby(col_name).agg('count').sort_values('ad_type',ascending=False)\n",
    "    plt.plot([i for i in range(len(df_frequency.values))], [np.log(i[2]) for i in df_frequency.values])\n",
    "    plt.show()\n",
    "\n",
    "#if a feature only has one unique value, it tells us nothing, so we drop it.\n",
    "def remove_only_ones(df):\n",
    "    for col in df.columns:\n",
    "        if len(df[col].unique()) == 1:\n",
    "            df.drop(col, inplace=True,axis=1)\n",
    "\n",
    "#just prints how many unique values are in each feature\n",
    "def print_column_counts(df):    \n",
    "    for i in df:\n",
    "        print(i, df[i].nunique())\n",
    "\n",
    "#We do some final cleaning, changing all non-numerical features into strings for later.\n",
    "def preprocess(df):    \n",
    "    for i in df:\n",
    "        if i[-1] != 't' or i[-2] != 'n' or i[-3] != 'c':\n",
    "            df[i] = df[i].astype('str')\n",
    "    remove_only_ones(df)\n",
    "    df['i_timestamp'] = df['i_timestamp'].apply(timestamp_to_hr)\n",
    "    df['r_timestamp'] = df['r_timestamp'].apply(timestamp_to_hr)\n",
    "    df['vi_timestamp'] = df['vi_timestamp'].apply(timestamp_to_hr)\n",
    "    \n",
    "#given a categorical column, we apply our earlier strategy of one-hot-encoding with maximum thresh=200\n",
    "def transform_column(df, col, thresh=200):\n",
    "    if df[col].nunique() > thresh:\n",
    "        df_frequency = df[[col, 'c_cnt']].groupby(col).agg('count').sort_values('c_cnt',ascending=False)\n",
    "        cat = [sorted(df_frequency[0:thresh].index.values)]\n",
    "        dict2 = {}\n",
    "        for i, item in enumerate(cat[0]):\n",
    "            dict2[item] = i\n",
    "        #enc = CategoricalEncoder(categories=[sorted(df_frequency[0:thresh].index.values)],handle_unknown='ignore')\n",
    "    else:\n",
    "        dict2 = {}\n",
    "        i = 0\n",
    "        for item in df[col].values:\n",
    "            if item not in dict2:\n",
    "                dict2[item] = i\n",
    "                i+=1\n",
    "        #enc = CategoricalEncoder(categories='auto',handle_unknown='ignore')\n",
    "    return [[1 if j == i else 0 for j in dict2] for i in df[col].values]\n",
    "\n",
    "#final preprocessing\n",
    "preprocess(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#this set contains our numerical column names\n",
    "#numerical_features = set(['c_cnt', 'i_cnt', 'r_cnt', 'vi_cnt'])\n",
    "numerical_features = set(['c_cnt', 'i_cnt', 'r_cnt', 'vi_cnt','total_count','c_cnt/v_cnt','vi_cnt/i_cnt','c_cnt/i_cnt'])\n",
    "\n",
    "#we create a copy so that X will not include 'c_cnt'\n",
    "df2 = df.copy()\n",
    "df2.drop('c_cnt',inplace=True,axis=1)\n",
    "Y = df['c_cnt'].values\n",
    "X = np.hstack([transform_column(df, col) if col not in numerical_features else df[col].values.reshape(-1,1)\n",
    "               for col in df2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Do cross validation\n",
    "ind_cutoff = int(0.7*len(X))\n",
    "X_train, Y_train = X[0:ind_cutoff], Y[0:ind_cutoff]\n",
    "X_test, Y_test = X[ind_cutoff:], Y[ind_cutoff:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(903, 1277)\n",
      "(903,)\n"
     ]
    }
   ],
   "source": [
    "def fix_class_imbalance_with_subsampling(X, Y, pos_ratio=6):\n",
    "    Y = Y.reshape(-1,1)\n",
    "    ind_1, ind_0 = [], []\n",
    "    for i, y_h in enumerate(Y):\n",
    "        if y_h: ind_1.append(i)\n",
    "        else: ind_0.append(i)\n",
    "    to_sample = np.random.permutation(pos_ratio*len(ind_1))\n",
    "    to_sample_0 = [ind_0[i] for i in to_sample]\n",
    "    X2 = np.vstack([X[ind_1],X[to_sample_0]])\n",
    "    Y2 = np.vstack([Y[ind_1],Y[to_sample_0]])\n",
    "    \n",
    "    new_ind = np.random.permutation(len(X2))\n",
    "    return X2[new_ind],Y2[new_ind]\n",
    "X_train, Y_train = fix_class_imbalance_with_subsampling(X_train,Y_train)\n",
    "Y_train = np.ravel(Y_train)\n",
    "print(X_train.shape)\n",
    "print(Y_train.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training data stats: \n",
      "Number of nonzero c_cnts:  129\n",
      "Ratio of nonzero c_cnts:  0.14285714285714285\n",
      "Testing data stats:\n",
      "Number of nonzero c_cnts:  47\n",
      "Ratio of nonzero c_cnts:  0.007374862702024165\n"
     ]
    }
   ],
   "source": [
    "print(\"Training data stats: \") \n",
    "print(\"Number of nonzero c_cnts: \", np.count_nonzero(Y_train))\n",
    "print(\"Ratio of nonzero c_cnts: \", np.count_nonzero(Y_train)/ len(Y_train))\n",
    "\n",
    "print(\"Testing data stats:\")\n",
    "print(\"Number of nonzero c_cnts: \", np.count_nonzero(Y_test))\n",
    "print(\"Ratio of nonzero c_cnts: \", np.count_nonzero(Y_test)/ len(Y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Performing a grid search to find the optimal weight for logistic regression with an L1 penalty. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/ipykernel/__main__.py:26: RuntimeWarning: invalid value encountered in long_scalars\n",
      "/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/ipykernel/__main__.py:27: RuntimeWarning: invalid value encountered in long_scalars\n"
     ]
    }
   ],
   "source": [
    "def simulate_L1_penalty(X,Y,start,end,step): \n",
    "    \n",
    "    rows_training = []\n",
    "    rows_testing = [] \n",
    "    \n",
    "    for c in np.arange(start, end, step):\n",
    "        \n",
    "        ind_cutoff = int(0.7*len(X))\n",
    "        X_train, Y_train = X[0:ind_cutoff], Y[0:ind_cutoff]\n",
    "        X_test, Y_test = X[ind_cutoff:], Y[ind_cutoff:]\n",
    "        \n",
    "        X_train, Y_train = fix_class_imbalance_with_subsampling(X_train,Y_train)\n",
    "        Y_train = np.ravel(Y_train)\n",
    "        \n",
    "        logreg = LogisticRegression(C=c, penalty='l1')\n",
    "        logreg.fit(X_train, Y_train)\n",
    "        \n",
    "        train_prediction = logreg.predict(X_train)\n",
    "        test_prediction = logreg.predict(X_test)\n",
    "\n",
    "        train_confusion_matrix = confusion_matrix(Y_train, train_prediction)\n",
    "        test_confusion_matrix = confusion_matrix(Y_test, test_prediction)\n",
    "    \n",
    "        precision_training = train_confusion_matrix[1][1]/(train_confusion_matrix[1][1] + train_confusion_matrix[0][1])\n",
    "        precision_testing = test_confusion_matrix[1][1]/(test_confusion_matrix[1][1] + test_confusion_matrix[0][1])\n",
    "        \n",
    "        recall_training = train_confusion_matrix[1][1]/sum(train_confusion_matrix[1])\n",
    "        recall_testing = test_confusion_matrix[1][1]/sum(test_confusion_matrix[1])\n",
    "        \n",
    "        rows_training += [[c, 100*logreg.score(X_train,Y_train), train_confusion_matrix[0][0], \n",
    "        train_confusion_matrix[0][1], train_confusion_matrix[1][0], train_confusion_matrix[1][1], precision_training, \n",
    "                          recall_training]]\n",
    "        \n",
    "        rows_testing += [[c, 100*logreg.score(X_test,Y_test), test_confusion_matrix[0][0], \n",
    "             test_confusion_matrix[0][1], test_confusion_matrix[1][0], test_confusion_matrix[1][1], precision_testing, \n",
    "                         recall_testing]]   \n",
    "    return rows_training, rows_testing\n",
    "\n",
    "rows_training, rows_testing = simulate_L1_penalty(X,Y, .001, 10, .5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Results for Training Data\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>accuracy</th>\n",
       "      <th>TN</th>\n",
       "      <th>FP</th>\n",
       "      <th>FN</th>\n",
       "      <th>TP</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Recall</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>L1 parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0.001</th>\n",
       "      <td>85.714286</td>\n",
       "      <td>774</td>\n",
       "      <td>0</td>\n",
       "      <td>129</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.501</th>\n",
       "      <td>98.781838</td>\n",
       "      <td>774</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>118</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.914729</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.001</th>\n",
       "      <td>98.781838</td>\n",
       "      <td>774</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>118</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.914729</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.501</th>\n",
       "      <td>98.781838</td>\n",
       "      <td>774</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>118</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.914729</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2.001</th>\n",
       "      <td>98.892580</td>\n",
       "      <td>774</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>119</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.922481</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2.501</th>\n",
       "      <td>98.892580</td>\n",
       "      <td>774</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>119</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.922481</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3.001</th>\n",
       "      <td>98.892580</td>\n",
       "      <td>774</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>119</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.922481</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3.501</th>\n",
       "      <td>98.892580</td>\n",
       "      <td>774</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>119</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.922481</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4.001</th>\n",
       "      <td>98.892580</td>\n",
       "      <td>774</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>119</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.922481</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4.501</th>\n",
       "      <td>98.892580</td>\n",
       "      <td>774</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>119</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.922481</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.001</th>\n",
       "      <td>99.003322</td>\n",
       "      <td>774</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>120</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.930233</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.501</th>\n",
       "      <td>99.003322</td>\n",
       "      <td>774</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>120</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.930233</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6.001</th>\n",
       "      <td>99.003322</td>\n",
       "      <td>774</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>120</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.930233</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6.501</th>\n",
       "      <td>99.003322</td>\n",
       "      <td>774</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>120</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.930233</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7.001</th>\n",
       "      <td>98.892580</td>\n",
       "      <td>773</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>120</td>\n",
       "      <td>0.991736</td>\n",
       "      <td>0.930233</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7.501</th>\n",
       "      <td>98.892580</td>\n",
       "      <td>773</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>120</td>\n",
       "      <td>0.991736</td>\n",
       "      <td>0.930233</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8.001</th>\n",
       "      <td>98.892580</td>\n",
       "      <td>773</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>120</td>\n",
       "      <td>0.991736</td>\n",
       "      <td>0.930233</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8.501</th>\n",
       "      <td>98.892580</td>\n",
       "      <td>773</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>120</td>\n",
       "      <td>0.991736</td>\n",
       "      <td>0.930233</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9.001</th>\n",
       "      <td>98.892580</td>\n",
       "      <td>773</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>120</td>\n",
       "      <td>0.991736</td>\n",
       "      <td>0.930233</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9.501</th>\n",
       "      <td>98.892580</td>\n",
       "      <td>773</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>120</td>\n",
       "      <td>0.991736</td>\n",
       "      <td>0.930233</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               accuracy   TN  FP   FN   TP  Precision    Recall\n",
       "L1 parameter                                                   \n",
       "0.001         85.714286  774   0  129    0        NaN  0.000000\n",
       "0.501         98.781838  774   0   11  118   1.000000  0.914729\n",
       "1.001         98.781838  774   0   11  118   1.000000  0.914729\n",
       "1.501         98.781838  774   0   11  118   1.000000  0.914729\n",
       "2.001         98.892580  774   0   10  119   1.000000  0.922481\n",
       "2.501         98.892580  774   0   10  119   1.000000  0.922481\n",
       "3.001         98.892580  774   0   10  119   1.000000  0.922481\n",
       "3.501         98.892580  774   0   10  119   1.000000  0.922481\n",
       "4.001         98.892580  774   0   10  119   1.000000  0.922481\n",
       "4.501         98.892580  774   0   10  119   1.000000  0.922481\n",
       "5.001         99.003322  774   0    9  120   1.000000  0.930233\n",
       "5.501         99.003322  774   0    9  120   1.000000  0.930233\n",
       "6.001         99.003322  774   0    9  120   1.000000  0.930233\n",
       "6.501         99.003322  774   0    9  120   1.000000  0.930233\n",
       "7.001         98.892580  773   1    9  120   0.991736  0.930233\n",
       "7.501         98.892580  773   1    9  120   0.991736  0.930233\n",
       "8.001         98.892580  773   1    9  120   0.991736  0.930233\n",
       "8.501         98.892580  773   1    9  120   0.991736  0.930233\n",
       "9.001         98.892580  773   1    9  120   0.991736  0.930233\n",
       "9.501         98.892580  773   1    9  120   0.991736  0.930233"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(\"Results for Training Data\")\n",
    "df_training = pd.DataFrame(rows_training, columns=['L1 parameter', 'accuracy', 'TN', 'FP', \n",
    "                           'FN', 'TP', \"Precision\", \"Recall\"])\n",
    "df_training.set_index(\"L1 parameter\", inplace=True)\n",
    "df_training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x12ecd4630>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(df_training.index.values, df_training['accuracy'])\n",
    "plt.xlabel(\"L1 Parameter\")\n",
    "plt.ylabel(\"Training Accuracy\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Results for Testing Data\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>accuracy</th>\n",
       "      <th>TN</th>\n",
       "      <th>FP</th>\n",
       "      <th>FN</th>\n",
       "      <th>TP</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Recall</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>L1 parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0.001</th>\n",
       "      <td>99.262514</td>\n",
       "      <td>6326</td>\n",
       "      <td>0</td>\n",
       "      <td>47</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.501</th>\n",
       "      <td>23.615252</td>\n",
       "      <td>1466</td>\n",
       "      <td>4860</td>\n",
       "      <td>8</td>\n",
       "      <td>39</td>\n",
       "      <td>0.007961</td>\n",
       "      <td>0.829787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.001</th>\n",
       "      <td>23.615252</td>\n",
       "      <td>1466</td>\n",
       "      <td>4860</td>\n",
       "      <td>8</td>\n",
       "      <td>39</td>\n",
       "      <td>0.007961</td>\n",
       "      <td>0.829787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.501</th>\n",
       "      <td>23.615252</td>\n",
       "      <td>1466</td>\n",
       "      <td>4860</td>\n",
       "      <td>8</td>\n",
       "      <td>39</td>\n",
       "      <td>0.007961</td>\n",
       "      <td>0.829787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2.001</th>\n",
       "      <td>23.615252</td>\n",
       "      <td>1466</td>\n",
       "      <td>4860</td>\n",
       "      <td>8</td>\n",
       "      <td>39</td>\n",
       "      <td>0.007961</td>\n",
       "      <td>0.829787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2.501</th>\n",
       "      <td>23.615252</td>\n",
       "      <td>1466</td>\n",
       "      <td>4860</td>\n",
       "      <td>8</td>\n",
       "      <td>39</td>\n",
       "      <td>0.007961</td>\n",
       "      <td>0.829787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3.001</th>\n",
       "      <td>23.615252</td>\n",
       "      <td>1466</td>\n",
       "      <td>4860</td>\n",
       "      <td>8</td>\n",
       "      <td>39</td>\n",
       "      <td>0.007961</td>\n",
       "      <td>0.829787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3.501</th>\n",
       "      <td>23.615252</td>\n",
       "      <td>1466</td>\n",
       "      <td>4860</td>\n",
       "      <td>8</td>\n",
       "      <td>39</td>\n",
       "      <td>0.007961</td>\n",
       "      <td>0.829787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4.001</th>\n",
       "      <td>23.630943</td>\n",
       "      <td>1467</td>\n",
       "      <td>4859</td>\n",
       "      <td>8</td>\n",
       "      <td>39</td>\n",
       "      <td>0.007962</td>\n",
       "      <td>0.829787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4.501</th>\n",
       "      <td>23.646634</td>\n",
       "      <td>1468</td>\n",
       "      <td>4858</td>\n",
       "      <td>8</td>\n",
       "      <td>39</td>\n",
       "      <td>0.007964</td>\n",
       "      <td>0.829787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.001</th>\n",
       "      <td>23.646634</td>\n",
       "      <td>1468</td>\n",
       "      <td>4858</td>\n",
       "      <td>8</td>\n",
       "      <td>39</td>\n",
       "      <td>0.007964</td>\n",
       "      <td>0.829787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.501</th>\n",
       "      <td>23.897693</td>\n",
       "      <td>1484</td>\n",
       "      <td>4842</td>\n",
       "      <td>8</td>\n",
       "      <td>39</td>\n",
       "      <td>0.007990</td>\n",
       "      <td>0.829787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6.001</th>\n",
       "      <td>23.646634</td>\n",
       "      <td>1468</td>\n",
       "      <td>4858</td>\n",
       "      <td>8</td>\n",
       "      <td>39</td>\n",
       "      <td>0.007964</td>\n",
       "      <td>0.829787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6.501</th>\n",
       "      <td>23.646634</td>\n",
       "      <td>1468</td>\n",
       "      <td>4858</td>\n",
       "      <td>8</td>\n",
       "      <td>39</td>\n",
       "      <td>0.007964</td>\n",
       "      <td>0.829787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7.001</th>\n",
       "      <td>23.646634</td>\n",
       "      <td>1468</td>\n",
       "      <td>4858</td>\n",
       "      <td>8</td>\n",
       "      <td>39</td>\n",
       "      <td>0.007964</td>\n",
       "      <td>0.829787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7.501</th>\n",
       "      <td>23.897693</td>\n",
       "      <td>1484</td>\n",
       "      <td>4842</td>\n",
       "      <td>8</td>\n",
       "      <td>39</td>\n",
       "      <td>0.007990</td>\n",
       "      <td>0.829787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8.001</th>\n",
       "      <td>23.615252</td>\n",
       "      <td>1466</td>\n",
       "      <td>4860</td>\n",
       "      <td>8</td>\n",
       "      <td>39</td>\n",
       "      <td>0.007961</td>\n",
       "      <td>0.829787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8.501</th>\n",
       "      <td>23.646634</td>\n",
       "      <td>1468</td>\n",
       "      <td>4858</td>\n",
       "      <td>8</td>\n",
       "      <td>39</td>\n",
       "      <td>0.007964</td>\n",
       "      <td>0.829787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9.001</th>\n",
       "      <td>23.615252</td>\n",
       "      <td>1466</td>\n",
       "      <td>4860</td>\n",
       "      <td>8</td>\n",
       "      <td>39</td>\n",
       "      <td>0.007961</td>\n",
       "      <td>0.829787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9.501</th>\n",
       "      <td>23.662325</td>\n",
       "      <td>1469</td>\n",
       "      <td>4857</td>\n",
       "      <td>8</td>\n",
       "      <td>39</td>\n",
       "      <td>0.007966</td>\n",
       "      <td>0.829787</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               accuracy    TN    FP  FN  TP  Precision    Recall\n",
       "L1 parameter                                                    \n",
       "0.001         99.262514  6326     0  47   0        NaN  0.000000\n",
       "0.501         23.615252  1466  4860   8  39   0.007961  0.829787\n",
       "1.001         23.615252  1466  4860   8  39   0.007961  0.829787\n",
       "1.501         23.615252  1466  4860   8  39   0.007961  0.829787\n",
       "2.001         23.615252  1466  4860   8  39   0.007961  0.829787\n",
       "2.501         23.615252  1466  4860   8  39   0.007961  0.829787\n",
       "3.001         23.615252  1466  4860   8  39   0.007961  0.829787\n",
       "3.501         23.615252  1466  4860   8  39   0.007961  0.829787\n",
       "4.001         23.630943  1467  4859   8  39   0.007962  0.829787\n",
       "4.501         23.646634  1468  4858   8  39   0.007964  0.829787\n",
       "5.001         23.646634  1468  4858   8  39   0.007964  0.829787\n",
       "5.501         23.897693  1484  4842   8  39   0.007990  0.829787\n",
       "6.001         23.646634  1468  4858   8  39   0.007964  0.829787\n",
       "6.501         23.646634  1468  4858   8  39   0.007964  0.829787\n",
       "7.001         23.646634  1468  4858   8  39   0.007964  0.829787\n",
       "7.501         23.897693  1484  4842   8  39   0.007990  0.829787\n",
       "8.001         23.615252  1466  4860   8  39   0.007961  0.829787\n",
       "8.501         23.646634  1468  4858   8  39   0.007964  0.829787\n",
       "9.001         23.615252  1466  4860   8  39   0.007961  0.829787\n",
       "9.501         23.662325  1469  4857   8  39   0.007966  0.829787"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(\"Results for Testing Data\")\n",
    "df_testing= pd.DataFrame(rows_testing, columns=['L1 parameter', 'accuracy', 'TN', 'FP', \n",
    "                           'FN', 'TP', \"Precision\", \"Recall\"])\n",
    "\n",
    "df_testing.set_index(\"L1 parameter\", inplace=True)\n",
    "df_testing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYkAAAEPCAYAAAC3NDh4AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAGxNJREFUeJzt3Xu4XHV97/H3J7fmBrmbECJQvMRgiyRSCV4Og3JQ0KJw\nSBFtDcI5to9VqPRpDZzTk927PC1yqPbBWmMafVLkaqEcKCkNUy+VWxMg3IKtkSRy2GBgI7kQk+zv\n+WOtTSY7M3vPZa299sx8Xs8zz6xZM2utLwPMd/++v8tSRGBmZlbNmKIDMDOz0ctJwszManKSMDOz\nmpwkzMysJicJMzOryUnCzMxqyjVJSFolqVfSoxX7ZkhaJ2mzpLslTat4768k/VDSw5JOyjM2MzMb\nXt4tidXA+wftWwHcExELgfXAFQCSzgLeEBFvAn4T+ErOsZmZ2TByTRIR8T3gpUG7PwysSbfXpK8H\n9n8jPe5+YJqkuXnGZ2ZmQyuiT+J1EdELEBHPAa9L9x8NbKv43E/SfWZmVpDR1HGtKvu8ZoiZWYHG\nFXDNXklzI6JX0jzg+XT/duD1FZ9bADxb7QSSnDzMzJoQEdX+IK9pJFoS4tBWwu3ARen2RcBtFfs/\nASBpKdA3UJaqJiL8iGDlypWFxzBaHv4u/F34uxj60YxcWxKS/h4oAbMkbQVWAl8AbpJ0MbAVWAYQ\nEXdKOlvSfwC7gE/mGZuZmQ0v1yQRER+r8dYZNT7/mRzDMTOzBo2mjmtrQqlUKjqEUcPfxUH+Lg7y\nd9EaNVunKpKkaMe4zcyKJIkYhR3XuejvLzoCM7PO17ZJoq+v6AjMzDpf2yaJn/606AjMzDpf2yaJ\nF14oOgIzs87XtknCLQkzs/w5SZiZWU1tmyRcbjIzy1/bJgm3JMzM8uckYWZmNbVtknC5ycwsf22b\nJNySMDPLn5OEmZnV1LZJwuUmM7P8tW2SePVV2Lu36CjMzDpb2yaJWbNgx46iozAz62xtmyTmzHG/\nhJlZ3to2Scye7X4JM7O8FZYkJF0maVP6uDTdN0PSOkmbJd0taVqt42fPdkvCzCxvhSQJSW8FLgFO\nBk4CPiTpjcAK4J6IWAisB66odQ6Xm8zM8ldUS2IRcF9E7I2IA8B3gHOBc4A16WfWAB+pdQKXm8zM\n8ldUkngM+C9peWkycDbwemBuRPQCRMRzwJxaJ3C5ycwsf4UkiYh4CrgKuAe4E3gY2N/IOZwkzMzy\n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\nlkIAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x12cd14c88>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(df_testing.index.values, df_testing['accuracy'])\n",
    "plt.xlabel(\"Num Features\")\n",
    "plt.ylabel(\"L1 parameter\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>accuracy</th>\n",
       "      <th>TN</th>\n",
       "      <th>FP</th>\n",
       "      <th>FN</th>\n",
       "      <th>TP</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Recall</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>L1 parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0.001</th>\n",
       "      <td>99.262514</td>\n",
       "      <td>6326</td>\n",
       "      <td>0</td>\n",
       "      <td>47</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.501</th>\n",
       "      <td>23.897693</td>\n",
       "      <td>1484</td>\n",
       "      <td>4842</td>\n",
       "      <td>8</td>\n",
       "      <td>39</td>\n",
       "      <td>0.007990</td>\n",
       "      <td>0.829787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7.501</th>\n",
       "      <td>23.897693</td>\n",
       "      <td>1484</td>\n",
       "      <td>4842</td>\n",
       "      <td>8</td>\n",
       "      <td>39</td>\n",
       "      <td>0.007990</td>\n",
       "      <td>0.829787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9.501</th>\n",
       "      <td>23.662325</td>\n",
       "      <td>1469</td>\n",
       "      <td>4857</td>\n",
       "      <td>8</td>\n",
       "      <td>39</td>\n",
       "      <td>0.007966</td>\n",
       "      <td>0.829787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4.501</th>\n",
       "      <td>23.646634</td>\n",
       "      <td>1468</td>\n",
       "      <td>4858</td>\n",
       "      <td>8</td>\n",
       "      <td>39</td>\n",
       "      <td>0.007964</td>\n",
       "      <td>0.829787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6.001</th>\n",
       "      <td>23.646634</td>\n",
       "      <td>1468</td>\n",
       "      <td>4858</td>\n",
       "      <td>8</td>\n",
       "      <td>39</td>\n",
       "      <td>0.007964</td>\n",
       "      <td>0.829787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6.501</th>\n",
       "      <td>23.646634</td>\n",
       "      <td>1468</td>\n",
       "      <td>4858</td>\n",
       "      <td>8</td>\n",
       "      <td>39</td>\n",
       "      <td>0.007964</td>\n",
       "      <td>0.829787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7.001</th>\n",
       "      <td>23.646634</td>\n",
       "      <td>1468</td>\n",
       "      <td>4858</td>\n",
       "      <td>8</td>\n",
       "      <td>39</td>\n",
       "      <td>0.007964</td>\n",
       "      <td>0.829787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8.501</th>\n",
       "      <td>23.646634</td>\n",
       "      <td>1468</td>\n",
       "      <td>4858</td>\n",
       "      <td>8</td>\n",
       "      <td>39</td>\n",
       "      <td>0.007964</td>\n",
       "      <td>0.829787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.001</th>\n",
       "      <td>23.646634</td>\n",
       "      <td>1468</td>\n",
       "      <td>4858</td>\n",
       "      <td>8</td>\n",
       "      <td>39</td>\n",
       "      <td>0.007964</td>\n",
       "      <td>0.829787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4.001</th>\n",
       "      <td>23.630943</td>\n",
       "      <td>1467</td>\n",
       "      <td>4859</td>\n",
       "      <td>8</td>\n",
       "      <td>39</td>\n",
       "      <td>0.007962</td>\n",
       "      <td>0.829787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2.001</th>\n",
       "      <td>23.615252</td>\n",
       "      <td>1466</td>\n",
       "      <td>4860</td>\n",
       "      <td>8</td>\n",
       "      <td>39</td>\n",
       "      <td>0.007961</td>\n",
       "      <td>0.829787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2.501</th>\n",
       "      <td>23.615252</td>\n",
       "      <td>1466</td>\n",
       "      <td>4860</td>\n",
       "      <td>8</td>\n",
       "      <td>39</td>\n",
       "      <td>0.007961</td>\n",
       "      <td>0.829787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3.001</th>\n",
       "      <td>23.615252</td>\n",
       "      <td>1466</td>\n",
       "      <td>4860</td>\n",
       "      <td>8</td>\n",
       "      <td>39</td>\n",
       "      <td>0.007961</td>\n",
       "      <td>0.829787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3.501</th>\n",
       "      <td>23.615252</td>\n",
       "      <td>1466</td>\n",
       "      <td>4860</td>\n",
       "      <td>8</td>\n",
       "      <td>39</td>\n",
       "      <td>0.007961</td>\n",
       "      <td>0.829787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.501</th>\n",
       "      <td>23.615252</td>\n",
       "      <td>1466</td>\n",
       "      <td>4860</td>\n",
       "      <td>8</td>\n",
       "      <td>39</td>\n",
       "      <td>0.007961</td>\n",
       "      <td>0.829787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.501</th>\n",
       "      <td>23.615252</td>\n",
       "      <td>1466</td>\n",
       "      <td>4860</td>\n",
       "      <td>8</td>\n",
       "      <td>39</td>\n",
       "      <td>0.007961</td>\n",
       "      <td>0.829787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.001</th>\n",
       "      <td>23.615252</td>\n",
       "      <td>1466</td>\n",
       "      <td>4860</td>\n",
       "      <td>8</td>\n",
       "      <td>39</td>\n",
       "      <td>0.007961</td>\n",
       "      <td>0.829787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8.001</th>\n",
       "      <td>23.615252</td>\n",
       "      <td>1466</td>\n",
       "      <td>4860</td>\n",
       "      <td>8</td>\n",
       "      <td>39</td>\n",
       "      <td>0.007961</td>\n",
       "      <td>0.829787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9.001</th>\n",
       "      <td>23.615252</td>\n",
       "      <td>1466</td>\n",
       "      <td>4860</td>\n",
       "      <td>8</td>\n",
       "      <td>39</td>\n",
       "      <td>0.007961</td>\n",
       "      <td>0.829787</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               accuracy    TN    FP  FN  TP  Precision    Recall\n",
       "L1 parameter                                                    \n",
       "0.001         99.262514  6326     0  47   0        NaN  0.000000\n",
       "5.501         23.897693  1484  4842   8  39   0.007990  0.829787\n",
       "7.501         23.897693  1484  4842   8  39   0.007990  0.829787\n",
       "9.501         23.662325  1469  4857   8  39   0.007966  0.829787\n",
       "4.501         23.646634  1468  4858   8  39   0.007964  0.829787\n",
       "6.001         23.646634  1468  4858   8  39   0.007964  0.829787\n",
       "6.501         23.646634  1468  4858   8  39   0.007964  0.829787\n",
       "7.001         23.646634  1468  4858   8  39   0.007964  0.829787\n",
       "8.501         23.646634  1468  4858   8  39   0.007964  0.829787\n",
       "5.001         23.646634  1468  4858   8  39   0.007964  0.829787\n",
       "4.001         23.630943  1467  4859   8  39   0.007962  0.829787\n",
       "2.001         23.615252  1466  4860   8  39   0.007961  0.829787\n",
       "2.501         23.615252  1466  4860   8  39   0.007961  0.829787\n",
       "3.001         23.615252  1466  4860   8  39   0.007961  0.829787\n",
       "3.501         23.615252  1466  4860   8  39   0.007961  0.829787\n",
       "0.501         23.615252  1466  4860   8  39   0.007961  0.829787\n",
       "1.501         23.615252  1466  4860   8  39   0.007961  0.829787\n",
       "1.001         23.615252  1466  4860   8  39   0.007961  0.829787\n",
       "8.001         23.615252  1466  4860   8  39   0.007961  0.829787\n",
       "9.001         23.615252  1466  4860   8  39   0.007961  0.829787"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "testing_sorted = df_testing.sort_values(by=\"accuracy\", ascending=False)\n",
    "testing_sorted"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.4.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
